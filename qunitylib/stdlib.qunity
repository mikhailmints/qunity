/*
Qunity standard library definitions, added to the start of every file
*/

type Bit := $0 | $1 end

def $plus : Bit := @had($0) end

def $minus : Bit := @had($1) end

def @had : Bit -> Bit := u3{pi/2, 0, pi} end

def @not : Bit -> Bit := @pauli_x end

def @pauli_x : Bit -> Bit := u3{pi, 0, pi} end

def @pauli_y : Bit -> Bit := u3{pi, pi/2, pi/2} end

def @pauli_z : Bit -> Bit := u3{0, pi, 0} end

def @adjoint{'a, 'b, @f : 'a -> 'b} : 'b -> 'a :=
    lambda @f(x) -> x
end

def @id{'a} : 'a -> 'a :=
    lambda x -> x
end

def @const0{'a} : 'a -> Bit :=
    lambda x -> $0
end

def @const1{'a} : 'a -> Bit :=
    lambda x -> $1
end

def @fst{'a, 'b} : ('a * 'b) -> 'a :=
    lambda (x0, x1) -> x0
end

def @snd{'a, 'b} : ('a * 'b) -> 'b :=
    lambda (x0, x1) -> x1
end

type Maybe{'a} :=
    | $Nothing
    | @Just of 'a
end

/*
Tensor product of type T, N times
*/
type Array{#n, 'a} :=
    if #n <= 0 then
        Unit
    else
        'a * Array{#n - 1, 'a}
    endif
end

type Num{#n} := Array{#n, Bit} end

/*
Tensor product of expression E, N times
*/
def $repeated{#n, 'a, $e : 'a} : Array{#n, 'a} :=
    if #n <= 0 then
        ()
    else
        ($e, $repeated{#n - 1, 'a, $e})
    endif
end

/*
Tensor product of program F, acting on type T, N times
*/
def @array_map{#n, 'a, 'b, @f : 'a -> 'b} : Array{#n, 'a} -> Array{#n, 'b} :=
    if #n <= 0 then
        @id{Unit}
    else
        lambda (x, x') -> (@f(x), @array_map{#n - 1, 'a, 'b, @f}(x'))
    endif
end

def @append{#n, 'a} : Array{#n, 'a} * 'a -> Array{#n + 1, 'a} :=
    if #n <= 0 then
        lambda (y, x) -> (x, y)
    else
        lambda ((y0, y1), x) -> (y0, @append{#n - 1, 'a}(y1, x))
    endif
end

def @concat{#n0, #n1, 'a} : Array{#n0, 'a} * Array{#n1, 'a} -> Array{#n0 + #n1, 'a} :=
    if #n1 <= 0 then
        lambda (a, ()) -> a
    else
        lambda (a, (b, b')) ->
            @concat{#n0 + 1, #n1 - 1, 'a}(@append{#n0, 'a}(a, b), b')
    endif
end

def @reverse{#n, 'a} : Array{#n, 'a} -> Array{#n, 'a} :=
    if #n <= 0 then
        @id{Unit}
    else
        lambda (x, y) ->
            @append{#n - 1, 'a}(@reverse{#n - 1, 'a}(y), x)
    endif
end

def @equals{'a, $e : 'a} : 'a -> Bit :=
    lambda x -> try x |> lambda $e -> $1 catch $0
end

def @reflect{'a, $e : 'a} : 'a -> 'a :=
    rphase{$e, 0, pi}
end

/*
Little-endian encoding of number N as a quantum state
*/
def $num_to_state{#n_bits, #n} : Num{#n_bits} :=
    if #n <= 0 then
        $repeated{#n_bits, Bit, $0}
    else
        if #n % 2 = 0 then
            ($0, $num_to_state{#n_bits - 1, #n / 2})
        else
            ($1, $num_to_state{#n_bits - 1, (#n - 1) / 2})
        endif
    endif
end

/*
Increment a little-endian N-bit number
*/
def @increment{#n} : Num{#n} -> Num{#n} :=
    if #n <= 0 then
        @id{Unit}
    else
        pmatch [
            ($0, x) -> ($1, x);
            ($1, x) -> ($0, x |> @increment{#n - 1})
        ]
    endif
end

/*
Decrement a little-endian N-bit number
*/
def @decrement{#n} : Num{#n} -> Num{#n} :=
    @adjoint{Num{#n}, Num{#n}, @increment{#n}}
end

/*
Addition of a constant #a (modulo 2^#n) in a pure way
*/
def @add_const{#n, #a} : Num{#n} -> Num{#n} :=
    if #n <= 0 then
        @id{Unit}
    else
        pmatch [
            ($0, x) -> (if #a % 2 = 0 then $0 else $1 endif, x |> @add_const{#n - 1, (#a - #a % 2)/2});
            ($1, x) -> (if #a % 2 = 0 then $1 else $0 endif, x |> @add_const{#n - 1, (#a - #a % 2)/2 + #a % 2})
        ]
    endif
end

def @cdkm_maj : Bit * Bit * Bit -> Bit * Bit * Bit :=
    lambda ((a, b), c) -> ctrl c [
        $0 -> (c, (a, b));
        $1 -> (c, (@not(a), @not(b)))
    ] |> lambda (c, (a, b)) -> ctrl (a, b) [
        ($1, $1) -> ((a, b), @not(c));
        else -> ((a, b), c);
    ]
end

def @cdkm_uma : Bit * Bit * Bit -> Bit * Bit * Bit :=
    lambda ((a, b), c) -> ctrl (a, b) [
        ($1, $1) -> ((a, b), @not(c));
        else -> ((a, b), c);
    ] |> lambda ((a, b), c) ->
        (a, (b, (c, ()))) |> @cnot{3, 2, 0} |> @cnot{3, 0, 1} |>
    lambda (a, (b, (c, ()))) -> ((a, b), c)
end

def @rev_adder_helper{#n} : Num{#n} * Num{#n} * Bit -> Num{#n} * Num{#n} * Bit :=
    if #n <= 0 then
        @id{Num{#n} * Num{#n} * Bit}
    else
        lambda (((a0, a1), (b0, b1)), c) ->
        let (((ca, ba), c'), (a1, b1)) = (@cdkm_maj((c, b0), a0), (a1, b1)) in
        let ((ca, ba), ((a1, s1), c'')) = ((ca, ba), @rev_adder_helper{#n - 1}((a1, b1), c')) in
        let ((a1, s1), ((c, s0), a0)) = ((a1, s1), @cdkm_uma((ca, ba), c'')) in
        (((a0, a1), (s0, s1)), c)
    endif
end

def @rev_adder{#n} : Num{#n} * Num{#n} -> Num{#n} * Num{#n} :=
    lambda (a, b) -> ((a, b), $0) |> @rev_adder_helper{#n} |> lambda (x, $0) -> x
end

def @add_helper{#n} : Num{#n} * Num{#n} * Bit -> Num{#n} :=
    if #n = 0 then
        lambda ((a, b), carry) -> ()
    else
        lambda (((a0, a1), (b0, b1)), carry) -> 
        let ((res, new_carry), (a1, b1)) = (match ((a0, b0), carry) [
            (($0, $0), $0) -> ($0, $0);
            (($0, $1), $0) -> ($1, $0);
            (($1, $0), $0) -> ($1, $0);
            (($1, $1), $0) -> ($0, $1);
            (($0, $0), $1) -> ($1, $0);
            (($0, $1), $1) -> ($0, $1);
            (($1, $0), $1) -> ($0, $1);
            (($1, $1), $1) -> ($1, $1);
        ], (a1, b1)) in
        (res, @add_helper{#n - 1}((a1, b1), new_carry))
    endif
end

/*
Add two N-bit numbers (modulo 2^#n)
*/
def @add{#n} : Num{#n} * Num{#n} -> Num{#n} :=
    lambda (a, b) -> @add_helper{#n}((a, b), $0)
end

def @num_downcast{#n} : Num{#n} -> Num{#n - 1} :=
    if #n <= 0 then
        lambda () -> ctrl () []
    else if #n = 1 then
        lambda _ -> ()
    else
        lambda (a0, a1) -> (a0, @num_downcast{#n - 1}(a1))
    endif
    endif
end

def @double{#n} : Num{#n} -> Num{#n} :=
    lambda a -> ($0, @num_downcast{#n}(a))
end

def @multiply_helper{#n, #m} : Num{#n} * Num{#m} -> Num{#n} :=
    if #m = 0 then
        lambda (a, b) -> $num_to_state{#n, 0}
    else
        lambda (a, (b0, b1)) -> match b0 [
            $0 -> @double{#n}(@multiply_helper{#n, #m - 1}(a, b1));
            $1 -> @add{#n}(a, @double{#n}(@multiply_helper{#n, #m - 1}(a, b1)))
        ]
    endif
end

def @multiply{#n} : Num{#n} * Num{#n} -> Num{#n} :=
    @multiply_helper{#n, #n}
end

/*
Retries an evaluation of e n times, amplifying the probability of success
*/
def $retry{#n, 'a, $e : 'a} : 'a :=
    if #n <= 0 then
        $e
    else
        try $e catch $retry{#n - 1, 'a, $e}
    endif
end

// def @and : Bit * Bit -> Bit :=
//     lambda x -> ctrl x [
//         ($1, $1) -> (x, $1);
//         else -> (x, $0);
//     ] |> @snd{Bit * Bit, Bit}
// end
def @and : Bit * Bit -> Bit :=
    lambda x -> match x [
        ($1, $1) -> $1;
        else -> $0;
    ]
end

/*
Utilities for the Quantum Fourier Transform
*/
def @couple{#k} : Bit * Bit -> Bit * Bit :=
    lambda (x0, x1) -> (x1, x0) |> rphase{($1, $1), 2 * pi / (2 ^ #k), 0}
end

def @rotations{#n} : Array{#n, Bit} -> Array{#n, Bit} :=
    if #n <= 0 then
        @id{Unit}
    else if #n = 1 then
        lambda (x, ()) -> (@had(x), ())
    else
        lambda (x0, x) ->
            let (x0, (y0', y)) = (x0, @rotations{#n - 1}(x)) in
            let ((y0, y1), y) = (@couple{#n}(x0, y0'), y) in
            (y0, (y1, y))
    endif
    endif
end

def @qft{#n} : Array{#n, Bit} -> Array{#n, Bit} :=
    if #n <= 0 then
        @id{Unit}
    else
        lambda x ->
            let (x0, x') = @rotations{#n}(x) in
            (x0, @qft{#n - 1}(x'))
    endif
end

/*
A single Grover iteration for oracle f on n qubits
*/
def @grover_iter{'a, $equal_superpos : 'a, @f : 'a -> Bit} : 'a -> 'a :=
    lambda x ->
    // Apply f as a phase oracle
    ctrl @f(x) [
        $0 -> x;
        $1 -> x |> gphase{pi}
    ] |>
    // Grover diffusion operator
    @reflect{'a, $equal_superpos}
end

/*
Run Grover's algorithm for n_iter iterations
*/
def $grover{'a, $equal_superpos : 'a, @f : 'a -> Bit, #n_iter} : 'a :=
    if #n_iter = 0 then
        $equal_superpos
    else
        $grover{'a, $equal_superpos, @f, #n_iter - 1} |> @grover_iter{'a, $equal_superpos, @f}
    endif
end

/*
Using Qunity to construct circuits in the style of the standard circuit model.
By using the following constructions, we can write quantum circuits in terms of
single-qubit gates and the CNOT gate.
*/

def @gate_1q{#n, #i, @f : Bit -> Bit} : Array{#n, Bit} -> Array{#n, Bit} :=
    if #i <= 0 then
        lambda (x, y) -> (@f(x), y)
    else
        lambda (x, y) -> (x, @gate_1q{#n - 1, #i - 1, @f}(y))
    endif
end

def @controlled_1q{#n, #i, #j, @f : Bit -> Bit} : Array{#n, Bit} -> Array{#n, Bit} :=
    if #i > #j then
        lambda x -> x
        |> @reverse{#n, Bit}
        |> @controlled_1q{#n, #n - 1 - #i, #n - 1 - #j, @f}
        |> @reverse{#n, Bit}
    else
        if #i <= 0 then
            lambda (x, y) -> ctrl x [
                $0 -> (x, y);
                $1 -> (x, @gate_1q{#n - 1, #j - 1, @f}(y))
            ]
        else
            lambda (x, y) -> (x, @cnot{#n - 1, #i - 1, #j - 1}(y))
        endif
    endif
end

def @cnot{#n, #i, #j} : Array{#n, Bit} -> Array{#n, Bit} :=
    @controlled_1q{#n, #i, #j, @not}
end

type List{#n, 'a} :=
    | $ListEmpty
    | @ListCons of
        if #n <= 0 then
            Void
        else
            'a * List{#n - 1, 'a}
        endif
end

def @list_append{#n, 'a} : List{#n, 'a} * 'a -> List{#n, 'a} :=
    if #n <= 0 then
        lambda _ -> ctrl () []
    else
        lambda (l, x) -> match l [
            $ListEmpty{#n, 'a} -> @ListCons{#n, 'a}(x, $ListEmpty{#n - 1, 'a});
            @ListCons{#n, 'a}(x', l') -> @ListCons{#n, 'a}(x', @list_append{#n - 1, 'a}(l', x))
        ]
    endif
end

def @list_append_const{#n, 'a, $x : 'a} : List{#n, 'a} -> List{#n, 'a} :=
    lambda l -> @list_append{#n, 'a}(l, $x)
end

def @list_upcast{#n, 'a} : List{#n, 'a} -> List{#n + 1, 'a} :=
    if #n <= 0 then
        lambda _ -> $ListEmpty{1, 'a}
    else
        lambda l -> match l [
            $ListEmpty{#n, 'a} -> $ListEmpty{#n + 1, 'a};
            @ListCons{#n, 'a}(x', l') ->
                @ListCons{#n + 1, 'a}(x', @list_upcast{#n - 1, 'a}(l'))
        ]
    endif
end

def @list_downcast{#n, 'a} : List{#n, 'a} -> List{#n - 1, 'a} :=
    if #n <= 0 then
        lambda _ -> ctrl () []
    else if #n = 1 then
        lambda $ListEmpty{#n, 'a} -> $ListEmpty{#n - 1, 'a}
    else
        lambda l -> ctrl l [
            $ListEmpty{#n, 'a} -> (l, $ListEmpty{#n - 1, 'a});
            @ListCons{#n, 'a}(x', l') ->
                (l, @ListCons{#n - 1, 'a}(x', @list_downcast{#n - 1, 'a}(l')))
        ]
        |> lambda (ctrl l [
            $ListEmpty{#n - 1, 'a} -> ($ListEmpty{#n, 'a}, l);
            @ListCons{#n - 1, 'a}(x', l') ->
                (@ListCons{#n, 'a}(x',
                l' |> lambda @list_downcast{#n - 1, 'a}(l'') -> l''), l);
        ]) -> l
    endif
    endif
end

def @list_cast_to{#n, 'a, #n'} : List{#n, 'a} -> List{#n', 'a} :=
    if #n' = #n then
        lambda l -> l
    else
        if #n' > #n then
            lambda l -> @list_cast_to{#n + 1, 'a, #n'}(@list_upcast{#n, 'a}(l))
        else
            lambda l -> @list_cast_to{#n - 1, 'a, #n'}(@list_downcast{#n, 'a}(l))
        endif
    endif
end

def @list_head{#n, 'a} : List{#n, 'a} -> 'a :=
    if #n <= 0 then
        lambda _ -> ctrl () []
    else
        lambda @ListCons{#n, 'a}(x, l') -> x
    endif
end

def @list_tail{#n, 'a} : List{#n, 'a} -> List{#n - 1, 'a} :=
    if #n <= 0 then
        lambda _ -> ctrl () []
    else
        lambda @ListCons{#n, 'a}(x, l') -> l'
    endif
end

def @list_length{#n, 'a, #n_bits} : List{#n, 'a} -> Num{#n_bits} :=
    if #n <= 0 then
        lambda l -> $num_to_state{#n_bits, 0}
    else
        lambda l -> match l [
            $ListEmpty{#n, 'a} -> $num_to_state{#n_bits, 0};
            @ListCons{#n, 'a}(x', l') ->
                @increment{#n_bits}(@list_length{#n - 1, 'a, #n_bits}(l'))
        ]
    endif
end
