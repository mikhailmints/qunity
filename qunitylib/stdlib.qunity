/*
Qunity standard library definitions, added to the start of every file
*/

def Bit := qunit + qunit end

def Bit0 := left {qunit, qunit} of () end

def Bit1 := right {qunit, qunit} of () end

def BitPlus := Had of Bit0 end

def BitMinus := Had of Bit1 end

def Had := u3 {pi/2, 0, pi} end

def Qnot := u3 {pi, 0, pi} end

def PauliZ := u3 {0, pi, 0} end

def Adjoint <F, T> :=
    lambda (F of x) {T} -> x
end

def LeftAdj <T0, T1> :=
    lambda (left {T0, T1} of x) {T0 + T1} -> x
end

def RightAdj <T0, T1> :=
    lambda (right {T0, T1} of x) {T0 + T1} -> x
end

def Qid <T> :=
    lambda x {T} -> x
end

def Const0 <T> :=
    lambda x {T} -> Bit0
end

def Const1 <T> :=
    lambda x {T} -> Bit1
end

def Fst <T0, T1> :=
    lambda (x0, x1) {T0 * T1} -> x0
end

def Snd <T0, T1> :=
    lambda (x0, x1) {T0 * T1} -> x1
end

def Maybe <T> :=
    qunit + T
end

def Nothing <T> :=
    left {qunit, T} of ()
end

def Just <T> :=
    right {qunit, T}
end

/*
Tensor product of type T, N times
*/
def NTensorT <N, T> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            qunit
        else
            T * NTensorT <[N - 1], T>
        endif
    endif
end

/*
Tensor product of expression E, N times
*/
def NTensorE <N, E> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            ()
        else
            (E, NTensorE <[N - 1], E>)
        endif
    endif
end

/*
Tensor product of program F, acting on type T, N times
*/
def NTensorF <N, F, T> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            Qid <qunit>
        else
            lambda (x, x') {NTensorT <N, T>} ->
            (F of x, NTensorF <[N - 1], F, T> of x')
        endif
    endif
end

def Append <N, T> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            lambda (y, x) {qunit * T} -> (x, y)
        else
            lambda ((y0, y1), x) {NTensorT <N, T> * T} ->
                (y0, Append <[N - 1], T> of (y1, x))
        endif
    endif
end

def Reverse <N, T> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            Qid <qunit>
        else
            lambda (x, y) {NTensorT <N, T>} ->
                Append <[N - 1], T> of (Reverse <[N - 1], T> of y, x)
        endif
    endif
end

def Equals <T, E> :=
    lambda x {T} -> try x |> lambda E {T} -> Bit1 catch Bit0
end

def Reflect <T, E> :=
    rphase {T, E, 0, pi}
end

def Tag <T0, T1> :=
    lambda x {T0 + T1} -> ctrl {T0 + T1, Bit * (T0 + T1)} x [
        left {T0, T1} of x0 -> (Bit0, x);
        right {T0, T1} of x1 -> (Bit1, x)
    ]
end

/*
Direct sum of programs F0 : T0 -> T0' and F1 : T1 -> T1', producing
F0 + F1 : T0 + T1 -> T0' + T1'
*/
def OpDirSum <F0, F1, T0, T1, T0', T1'> :=
    lambda x {T0 + T1} ->
    let (xi, x) {Bit * (T0 + T1)} = Tag <T0, T1> of x in
    ctrl {Bit, Bit * (T0' + T1')} xi [
        Bit0 -> (xi, x |> LeftAdj <T0, T1> |> F0 |> left {T0', T1'});
        Bit1 -> (xi, x |> RightAdj <T0, T1> |> F1 |> right {T0', T1'})
    ] |> Adjoint <Tag <T0', T1'>, Bit * (T0' + T1')>
end

/*
Little-endian encoding of number N as a quantum state
*/
def NumToStateLE <N, Nbits> :=
    if N lt [0] then
        fail
    else
        if Nbits lt [0] then
            fail
        else
            if N = [0] then
                NTensorE <[Nbits], Bit0>
            else
                if [N % 2] = [0] then
                    (Bit0, NumToStateLE <[N / 2], [Nbits - 1]>)
                else
                    (Bit1, NumToStateLE <[(N - 1) / 2], [Nbits - 1]>)
                endif
            endif
        endif
    endif
end

/*
Big-endian encoding of number N as a quantum state
*/
def NumToStateBE <N, Nbits> :=
    NumToStateLE <N, [Nbits]> |> Reverse <[Nbits], Bit>
end

/*
Increment a little-endian N-bit number
*/
def IncrementLE <N> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            Qid <qunit>
        else
            pmatch {NTensorT <N, Bit>, NTensorT <N, Bit>} [
                (Bit0, x) -> (Bit1, x);
                (Bit1, x) -> (Bit0, x |> IncrementLE <[N - 1]>)
            ]
        endif
    endif
end

/*
Decrement a little-endian N-bit number
*/
def DecrementLE <N> :=
    Adjoint <IncrementLE <N>, NTensorT <N, Bit>>
end

/*
Increment a big-endian N-bit number
*/
def IncrementBE <N> :=
    lambda x {NTensorT <N, Bit>} ->
    x |> Reverse <N, Bit> |> IncrementLE <N> |> Reverse <N, Bit>
end

/*
Decrement a big-endian N-bit number
*/
def DecrementBE <N> :=
    Adjoint <IncrementBE <N>, NTensorT <N, Bit>>
end

/*
Retries an evaluation of E N times, amplifying the probability of success
*/
def Retry <N, E> :=
    if N lt [0] then
        fail
    else
        if N = [0] then
            E
        else
            try E catch Retry <[N - 1], E>
        endif
    endif
end

def And :=
    lambda x {Bit * Bit} ->
    match {Bit * Bit, Bit} x [
        (Bit1, Bit1) -> Bit1;
        else -> Bit0;
    ]
end

/*
Utilities for the Quantum Fourier Transform
*/
def Couple <K> :=
    lambda (x0, x1) {Bit * Bit} ->
    (x1, x0) |> rphase {Bit * Bit, (Bit1, Bit1), 2 * pi / (2 ^ K), 0}
end

def Rotations <N> :=
    if N = [0] then
        Qid <qunit>
    else
        if N = [1] then
            lambda (x, ()) {NTensorT <[1], Bit>} -> (Had of x, ())
        else
            lambda (x0, x) {NTensorT <N, Bit>} ->
            let (x0, (y0', y)) {NTensorT <N, Bit>} =
            (x0, x |> Rotations <[N - 1]>) in
            let ((y0, y1), y) {(Bit * Bit) * NTensorT <[N - 2], Bit>} =
            ((x0, y0') |> Couple <N>, y) in (y0, (y1, y))
        endif
    endif
end

/*
Quantum Fourier Transform on N bits
*/
def Qft <N> :=
    if N = [0] then
        Qid <qunit>
    else
        lambda x {NTensorT <N, Bit>} ->
        let (x0, x') {NTensorT <N, Bit>} =
        x |> Rotations <N> in
        (x0, x' |> Qft <[N - 1]>)
    endif
end

/*
Using Qunity to construct circuits in the style of the standard circuit model.
By using the following constructions, we can write quantum circuits in terms of
single-qubit gates and the CNOT gate.
*/

def Gate1Q <N, I, F> :=
    if I lt [0] then
        fail
    else
        if I = [0] then
            lambda (x, y) {NTensorT <N, Bit>} -> (F of x, y)
        else
            lambda (x, y) {NTensorT <N, Bit>} ->
                (x, Gate1Q <[N - 1], [I - 1], F> of y)
        endif
    endif
end

def Controlled1Q <N, I, J, F> :=
    if I gt J then
        lambda x {NTensorT <N, Bit>} -> x
        |> Reverse <N, Bit>
        |> Controlled1Q <N, [N - 1 - I], [N - 1 - J], F>
        |> Reverse <N, Bit>
    else
        if I = [0] then
            if J leq [0] then
                fail
            else
                lambda (x, y) {NTensorT <N, Bit>} ->
                    ctrl {Bit, NTensorT <N, Bit>} x [
                        Bit0 -> (x, y);
                        Bit1 -> (x, Gate1Q <[N - 1], [J - 1], F> of y)
                    ]
            endif
        else
            lambda (x, y) {NTensorT <N, Bit>} ->
                (x, Cnot <[N - 1], [I - 1], [J - 1]> of y)
        endif
    endif
end

def Cnot <N, I, J> :=
    Controlled1Q <N, I, J, Qnot>
end
