/*
Qunity standard library definitions, added to the start of every file
*/

def Bit := qunit + qunit end

def Bit0 := left {qunit, qunit} of () end

def Bit1 := right {qunit, qunit} of () end

def BitPlus := Had of Bit0 end

def BitMinus := Had of Bit1 end

def Had := u3 {pi/2, 0, pi} end

def Qnot := u3 {pi, 0, pi} end

def Adjoint <F, T> :=
    lambda (F of x) {T} -> x
end

def LeftAdj <T0, T1> :=
    lambda (left {T0, T1} of x) {T0 + T1} -> x
end

def RightAdj <T0, T1> :=
    lambda (right {T0, T1} of x) {T0 + T1} -> x
end

def Qid <T> :=
    lambda x {T} -> x
end

def Const0 <T> :=
    lambda x {T} -> Bit0
end

def Const1 <T> :=
    lambda x {T} -> Bit1
end

def Fst <T0, T1> :=
    lambda (x0, x1) {T0 * T1} -> x0
end

def Snd <T0, T1> :=
    lambda (x0, x1) {T0 * T1} -> x1
end

/*
Tensor product of type T, N times
*/
def NTensorT <N, T> :=
    if N = [0] then
        qunit
    else
        T * NTensorT <[N - 1], T>
    endif
end

/*
Tensor product of expression E, N times
*/
def NTensorE <N, E> :=
    if N = [0] then
        ()
    else
        (E, NTensorE <[N - 1], E>)
    endif
end

/*
Tensor product of program F, acting on type T, N times
*/
def NTensorF <N, F, T> :=
    if N = [0] then
        Qid <qunit>
    else
        lambda (x, x') {NTensorT <N, T>} ->
        (F of x, NTensorF <[N - 1], F, T> of x')
    endif
end

def Equals <T, E> :=
    lambda x {T} -> try x |> lambda E {T} -> Bit1 catch Bit0
end

/*
This doesn't work as expected due to control semantics
*/
def Reflect <T, E> :=
    lambda x {T} -> ctrl {Bit, T} (Equals <T, E> of x) [
        Bit1 -> x;
        Bit0 -> x |> gphase {T, pi}
    ]
end

def Tag <T0, T1> :=
    lambda x {T0 + T1} -> ctrl {T0 + T1, Bit * (T0 + T1)} x [
        left {T0, T1} of x0 -> (Bit0, x);
        right {T0, T1} of x1 -> (Bit1, x)
    ]
end

/*
Direct sum of programs F0 : T0 -> T0' and F1 : T1 -> T1', producing
F0 + F1 : T0 + T1 -> T0' + T1'
*/
def OpDirSum <F0, F1, T0, T1, T0', T1'> :=
    lambda x {T0 + T1} ->
    let (xi, x) {Bit * (T0 + T1)} = Tag <T0, T1> of x in
    ctrl {Bit, Bit * (T0' + T1')} xi [
        Bit0 -> (xi, x |> LeftAdj <T0, T1> |> F0 |> left {T0', T1'});
        Bit1 -> (xi, x |> RightAdj <T0, T1> |> F1 |> right {T0', T1'})
    ] |> Adjoint <Tag <T0', T1'>, Bit * (T0' + T1')>
end

/*
Little-endian encoding of number N as a quantum state
*/
def NumToState <N> :=
    if N = [0] then
        ()
    else
        if [N % 2] = [0] then
            (Bit0, NumToState <[N / 2]>)
        else
            (Bit1, NumToState <[(N - 1) / 2]>)
        endif
    endif
end

/*
Retries an evaluation of E N times, amplifying the probability of success
*/
def Retry <N, E> :=
    if N = [0] then
        E
    else
        try E catch Retry <[N - 1], E>
    endif
end
