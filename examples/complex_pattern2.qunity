(left {unit, (unit + Bit) * Bit} of ())
|> lambda x {unit + ((unit + Bit) * Bit)} ->
    ctrl {unit + ((unit + Bit) * Bit), unit + ((unit + Bit) * Bit)} x [
        right {unit, (unit + Bit) * Bit} of (right {unit, Bit} of a, b) -> x;
        right {unit, (unit + Bit) * Bit} of (left {unit, Bit} of (), Bit0) -> x;
        right {unit, (unit + Bit) * Bit} of (left {unit, Bit} of (), Bit1) -> x;
        left {unit, (unit + Bit) * Bit} of () -> x;
    ]
