/*
Using Qunity to construct circuits in the style of the standard circuit model.
By using the following constructions, we can write quantum circuits in terms of
single-qubit gates and the CNOT gate.
*/

def Gate1Q <N, I, F> :=
    if I << [0] then
        fail
    else
        if I = [0] then
            lambda (x, y) {NTensorT <[N], Bit>} -> (F of x, y)
        else
            lambda (x, y) {NTensorT <[N], Bit>} ->
                (x, Gate1Q <[N - 1], [I - 1], F> of y)
        endif
    endif
end

def Cnot <N, I, J> :=
    if I >> J then
        lambda x {NTensorT <[N], Bit>} -> x
        |> Reverse <[N], Bit>
        |> Cnot <[N], [N - 1 - I], [N - 1 - J]>
        |> Reverse <[N], Bit>
    else
        if I = [0] then
            if J <= [0] then
                fail
            else
                lambda (x, y) {NTensorT <[N], Bit>} ->
                    ctrl {Bit, NTensorT <[N], Bit>} x [
                        Bit0 -> (x, y);
                        Bit1 -> (x, Gate1Q <[N - 1], [J - 1], Qnot> of y)
                    ]
            endif
        else
            lambda (x, y) {NTensorT <[N], Bit>} ->
                (x, Cnot <[N - 1], [I - 1], [J - 1]> of y)
        endif
    endif
end

// Example: Bell state as Had and Cnot

def N := [2] end

NTensorE <[N], Bit0>
|> Gate1Q <[N], [0], Had>
|> Cnot <[N], [0], [1]>
