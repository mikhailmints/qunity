def @step{#n} : Num{#n} * Bit -> Num{#n} * Bit :=
    lambda (x, velocity) ->
    ctrl (match (x, velocity) [
        ($repeated{#n, Bit, $0}, $0) -> @Just{Bit}($0);
        ($repeated{#n, Bit, $1}, $1) -> @Just{Bit}($1);
        else -> $Nothing{Bit}
    ]) [
        @Just{Bit}($0) -> ((x, velocity), (@increment{#n}($repeated{#n, Bit, $0}), $1));
        @Just{Bit}($1) -> ((x, velocity), (@decrement{#n}($repeated{#n, Bit, $1}), $0));
        $Nothing{Bit} -> ((x, velocity), ctrl velocity [
            $0 -> (@decrement{#n}(x), velocity);
            $1 -> (@increment{#n}(x), velocity)
        ])
    ] |> @snd{Num{#n} * Bit, Num{#n} * Bit}
end

def @walk{#n, #nsteps} : Num{#n} * Bit -> Num{#n} * Bit :=
    if #nsteps = 0 then
        @id{Num{#n} * Bit}
    else
        lambda (x, velocity) ->
        (x, velocity) |> @step{#n} |> @walk{#n, #nsteps - 1}
    endif
end

def #n := 3 end
def #nsteps := 1 end

($repeated{#n, Bit, $plus}, $0 |> u3{pi/4, 0, 0})
|> @walk{#n, #nsteps}
|> @fst{Num{#n}, Bit}
|> @reverse{#n, Bit}
