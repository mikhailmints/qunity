def Child := Bit end
def Vleft := Bit0 end
def Vright := Bit1 end
def Coin := Maybe <Child> end
def Cdown := Nothing <Child> end
def Cleft := Just <Child> of Vleft end
def Cright := Just <Child> of Vright end

/*
List of up to N - 1 elements
*/
def Vertex <N> :=
    if N = [0] then
        void
    else
        unit + (Vertex <[N - 1]> * Child)
    endif
end

/*
Type: Vertex <[N + 1]>
Empty list that can contain up to N elements
*/
def Root <N> :=
    left {unit, Vertex <N> * Child} of ()
end

/*
E : Vertex <N>
E0 : Child
Type: Vertex <[N + 1]>
*/
def Qcons <E, N, E0> :=
    right {unit, Vertex <N> * Child} of (E, E0)
end

/*
Type: Vertex <[N + 2]>
Has Vleft and can add N additional children
*/
def Root' <N> :=
    Qcons <Root <N>, [N + 1], Vleft>
end

def N := [2] end

Root <[N + 1]>
|> lambda v {Vertex <[N + 2]>} ->
ctrl {Vertex <[N + 2]>, Vertex <[N + 2]>} v [
    Qcons <Qcons <v', N, x>, [N + 1], x'> -> v;
    Root' <N> -> v;
    Root <[N + 1]> -> v
]
