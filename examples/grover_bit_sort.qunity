/*
A single Grover iteration for oracle F on N qubits
*/
def GroverIter <N, F> :=
    lambda x {NTensorT <N, Bit>} ->
    // Apply F as a phase oracle
    ctrl {Bit, NTensorT <N, Bit>} (F of x) [
        Bit0 -> x;
        Bit1 -> x |> gphase {NTensorT <N, Bit>, pi}
    ] |>
    // Grover diffusion operator
    Reflect <NTensorT <N, Bit>, NTensorE <N, BitPlus>>
end

/*
Run Grover's algorithm for Niter iterations
*/
def Grover <N, F, Niter> :=
    if Niter = [0] then
        NTensorE <N, BitPlus>
    else
        Grover <N, F, [Niter - 1]> |> GroverIter <N, F>
    endif
end

def N := [5] end
def Answer := (Bit0, (Bit1, (Bit1, (Bit0, (Bit0, ()))))) end

def IsSorted <N, T, Compare> :=
    if N = [0] then
        lambda () {unit} -> Bit1
    else
        if N = [1] then
            lambda (x, ()) {T * unit} -> Bit1
        else
            lambda (x0, (x1, x')) {NTensorT <N, T>} ->
                match {Bit, Bit} (Compare of (x0, x1)) [
                    Bit0 -> Bit0;
                    Bit1 -> IsSorted <[N - 1], T, Compare> of (x1, x')
                ]
        endif
    endif
end

def BitCompare :=
    lambda (a, b) {Bit * Bit} -> match {Bit * Bit, Bit} (a, b) [
        (Bit1, Bit0) -> Bit0;
        else -> Bit1
    ]
end

/*
Quantum oracle representing a function acting on N bits that outputs
1 for the input Answer and 0 for other inputs
*/
def F :=
    lambda x {NTensorT <N, Bit>} ->
    try
        x |> lambda Answer {NTensorT <N, Bit>} -> Bit1
    catch
        Bit0
end

Grover <N, IsSorted <N, Bit, BitCompare>, [4]>
