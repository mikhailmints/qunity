type BinaryTree{#d, 'a} :=
    | $Leaf
    | @Node of
        if #d = 0 then
            Void
        else
            'a * (BinaryTree{#d - 1, 'a} * BinaryTree{#d - 1, 'a})
        endif
end

def @bst_insert{#d, 'a, @cmp : 'a * 'a -> Bit} : BinaryTree{#d, 'a} * 'a -> BinaryTree{#d, 'a} :=
    if #d = 0 then
        lambda _ -> ctrl () []
    else
        lambda (tree, x) -> match tree [
            $Leaf{#d, 'a} -> @Node{#d, 'a}(x, ($Leaf{#d - 1, 'a}, $Leaf{#d - 1, 'a}));
            @Node{#d, 'a}(y, (l, r)) -> match @cmp(x, y) [
                $1 -> @Node{#d, 'a}(y, (@bst_insert{#d - 1, 'a, @cmp}(l, x), r));
                $0 -> @Node{#d, 'a}(y, (l, @bst_insert{#d - 1, 'a, @cmp}(r, x)))
            ]
        ]
    endif
end

def @bit_compare : Bit * Bit -> Bit :=
    lambda (a, b) -> match (a, b) [
        ($1, $0) -> $0;
        else -> $1
    ]
end

def #d := 2 end

type T := BinaryTree{#d, Bit} end

def @ins{$x : Bit} : T -> T :=
    lambda t -> @bst_insert{#d, Bit, @bit_compare}(t, $x)
end

$Leaf{#d, Bit} |> @ins{$plus} |> @ins{$plus}
