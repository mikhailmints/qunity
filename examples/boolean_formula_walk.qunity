def Child := Bit end
def Vleft := Bit0 end
def Vright := Bit1 end
def Coin := Maybe <Child> end
def Cdown := Nothing <Child> end
def Cleft := Just <Child> of Vleft end
def Cright := Just <Child> of Vright end

/*
List of up to N - 1 elements
*/
def Vertex <N> :=
    if N = [0] then
        void
    else
        qunit + (Vertex <[N - 1]> * Child)
    endif
end

/*
Type: Vertex <[N + 1]>
Empty list that can contain up to N elements
*/
def Root <N> :=
    left {qunit, Vertex <[N]> * Child} of ()
end

/*
E : Vertex <[N]>
E0 : Child
Type: Vertex <[N + 1]>
*/
def Qcons <E, N, E0> :=
    right {qunit, Vertex <[N]> * Child} of (E, E0)
end

/*
Type: Vertex <[N + 2]>
Has Vleft and can add N additional children
*/
def Root' <N> :=
    Qcons <Root <N>, [N + 1], Vleft>
end

def Leaf <N> :=
    NTensorT <N, Child>
end

def UState :=
    Bit0
    |> u3 {2 * arccos(sqrt(1 / 3)), 0, 0}
    |> lambda x {Bit} -> ctrl {Bit, Bit * Bit} x [
        Bit0 -> (x, Bit0);
        Bit1 -> (x, BitPlus)
    ]
    |> lambda x {Bit * Bit} -> ctrl {Bit * Bit, (Bit * Bit) * Coin} x [
        (Bit0, Bit0) -> (x, Cdown);
        (Bit1, Bit0) -> (x, Cleft);
        (Bit1, Bit1) -> (x, Cright)
    ]
    |> lambda (
        ctrl {Coin, (Bit * Bit) * Coin} x' [
            Cdown -> ((Bit0, Bit0), x');
            Cleft -> ((Bit1, Bit0), x');
            Cright -> ((Bit1, Bit1), x')
        ]
    ) {(Bit * Bit) * Coin} -> x'
end

def U'State <N> :=
    Bit0
    |> u3 {2 * arccos(1 / sqrt(sqrt(2 ^ N))), 0, 0}
    |> lambda x {Bit} -> ctrl {Bit, Bit * Coin} x [
        Bit0 -> (x, Cdown);
        Bit1 -> (x, Cleft)
    ]
    |> lambda (
        ctrl {Coin, Bit * Coin} x' [
            Cdown -> (Bit0, x');
            Cleft -> (Bit1, x')
        ]
    ) {Bit * Coin} -> x'
end

/*
Vertex <[N + 2]> -> Leaf <[N]>
*/
def AsLeaf <N> :=
    if N = [0] then
        lambda Root' <[0]> {Vertex <[2]>} -> ()
    else
        lambda Qcons <x, [N + 1], x0> {Vertex <[N + 2]>} ->
            (x0, x |> AsLeaf <[N - 1]>)
    endif
end

/*
Vertex <[N + 1]> -> Vertex <[N]>
*/
def Downcast <N> :=
    if N = [0] then
        lambda v {Vertex <[1]>} -> ctrl {Vertex <[1]>, Vertex <[0]>} v []
    else
        lambda v {Vertex <[N + 1]>} ->
            ctrl {Vertex <[N + 1]>, Vertex <[N + 1]> * Vertex <[N]>} v [
                Root <[N]> -> (v, Root <[N - 1]>);
                Qcons <v', [N], x> ->
                    (v, Qcons <Downcast <[N - 1]> of v', [N - 1], x>)
            ]
            |> lambda (
                ctrl {Vertex <[N]>, Vertex <[N + 1]> * Vertex <[N]>} v [
                    Root <[N - 1]> -> (Root <[N]>, v);
                    Qcons <v', [N - 1], x> ->
                        (Qcons <Adjoint <Downcast <[N - 1]>,
                        Vertex <[N - 1]>> of v', [N], x>, v)
                ]
            ) {Vertex <[N + 1]> * Vertex <[N]>} -> v
    endif
end

/*
Vertex <[N]> -> Vertex <[N]>
*/
def LeftChild <N> :=
    lambda v {Vertex <N>} -> Downcast <N> of Qcons <v, [N], Vleft>
end

/*
Vertex <[N]> -> Vertex <[N]>
*/
def RightChild <N> :=
    lambda v {Vertex <N>} -> Downcast <N> of Qcons <v, [N], Vright>
end

/*
If the current vertex is a leaf, apply the F oracle. If it is an internal
vertex, reflect the coin over the U state, and if it is the Root' vertex,
reflect the coin over the U' state.
*/
def Diffusion <N, F> :=
    lambda (c, v) {Coin * Vertex <[N + 2]>} ->
        ctrl {Vertex <[N + 2]>, Coin * Vertex <[N + 2]>} v [
            Qcons <Qcons <v', [N], x>, [N + 1], x'> ->
                ctrl {Maybe <Leaf <N>>, Coin * Vertex <[N + 2]>} (
                    try
                        Qcons <Qcons <v', [N], x>, [N + 1], x'>
                        |> AsLeaf <[N]> |> Just <Leaf <N>>
                    catch
                        Nothing <Leaf <N>>
                ) [
                    Nothing <Leaf <N>> -> (c |> Reflect <Coin, UState>, v);
                    Just <Leaf <N>> of l ->
                        ctrl {Bit, Coin * Vertex <[N + 2]>} (F of l) [
                            Bit0 -> (c, v);
                            Bit1 ->
                                (c, v) |> gphase {Coin * Vertex <[N + 2]>, pi}
                        ]
                ];
            Root' <[N]> -> (c |> Reflect <Coin, U'State <[N]>>, v);
            Root <[N + 1]> -> (c, v)
        ]
end

/*
If current coin goes left or right, next coin is down. If current coin goes
down from left child, next coin is left, and if current coin goes down from
right child, next coin is right.
*/
def NextCoin <N> :=
    lambda x {Coin * Vertex <[N + 2]>} ->
        ctrl {Coin * Vertex <[N + 2]>, (Coin * Vertex <[N + 2]>) * Coin} x [
            (Cdown, Qcons <v, [N + 1], Vleft>) -> (x, Cleft);
            (Cdown, Qcons <v, [N + 1], Vright>) -> (x, Cright);
            (Cright, v) -> (x, Cdown);
            (Cleft, v) -> (x, Cdown)
        ]
end

/*
Updates the vertex index according to the coin, and changes the coin,
effectively flipping the direction of the given edge.
*/
def Walk <N> :=
    lambda x {Coin * Vertex <[N + 2]>} ->
        x |> NextCoin <[N]>
        |> lambda ((c, v), c') {(Coin * Vertex <[N + 2]>) * Coin} ->
            ctrl {Coin * Coin, (Coin * Vertex <[N + 2]>) * Coin} (c, c') [
                (Cdown, Cleft) ->
                    ((c', Adjoint <LeftChild <[N + 2]>, Vertex <[N + 2]>> of v), c);
                (Cdown, Cright) ->
                    ((c', Adjoint <RightChild <[N + 2]>, Vertex <[N + 2]>> of v), c);
                (Cleft, Cdown) -> ((c', LeftChild <[N + 2]> of v), c);
                (Cright, Cdown) -> ((c', RightChild <[N + 2]> of v), c)
            ]
        |> Adjoint <NextCoin <[N]>, (Coin * Vertex <[N + 2]>) * Coin>
end

def RunQuantumWalk <N, F, Niter> :=
    if Niter = [0] then
        Qid <Coin * Vertex <[N + 2]>>
    else
        lambda x {Coin * Vertex <[N + 2]>} ->
            x |> Diffusion <[N], F> |> Walk <[N]>
            |> RunQuantumWalk <[N], F, [Niter - 1]>
    endif
end

def InitialTState <Tbits> :=
    if Tbits lt [1] then
        fail
    else
        NTensorE <[Tbits], BitPlus>
        |> rphase {NTensorT <[Tbits], Bit>, (Bit1, _), -pi / 2, 0} |>
        if Tbits = [1] then
            Qid <NTensorT <[Tbits], Bit>>
        else
            rphase {NTensorT <[Tbits], Bit>, (_0, (Bit1, _1)), pi, 0}
        endif
        |> Reverse <[Tbits], Bit>
    endif
end

/*
Given a Tbits-bit register treg, applies the quantum walk t many times when
the register is in state t, coherently.
*/
def ControlledWalk <Tbits, N, F> :=
    if Tbits = [0] then
        Qid <NTensorT <[Tbits], Bit> * (Coin * Vertex <[N + 2]>)>
    else
        lambda ((t0, trest), (c, v))
        {NTensorT <[Tbits], Bit> * (Coin * Vertex <[N + 2]>)} ->
            ctrl {Bit, NTensorT <[Tbits], Bit> * (Coin * Vertex <[N + 2]>)} t0 [
                Bit0 -> ((t0, trest), (c, v));
                Bit1 -> (
                    (t0, trest),
                    (c, v) |> RunQuantumWalk <[N], F, [2 ^ (Tbits - 1)]>
                )
            ]
            |> lambda ((t0, trest), (c, v))
            {NTensorT <[Tbits], Bit> * (Coin * Vertex <[N + 2]>)} ->
                let (t0, (trest', (c', v')))
                {Bit * (NTensorT <[Tbits - 1], Bit> * (Coin * Vertex <[N + 2]>))} =
                (t0, (trest, (c, v)) |> ControlledWalk <[Tbits - 1], N, F>)
                in ((t0, trest'), (c', v'))
    endif
end

/*
Definitions for QFT
*/

def And :=
    lambda x {Bit * Bit} ->
    ctrl {Bit * Bit, (Bit * Bit) * Bit} x [
        (Bit0, Bit0) -> (x, Bit0);
        (Bit0, Bit1) -> (x, Bit0);
        (Bit1, Bit0) -> (x, Bit0);
        (Bit1, Bit1) -> (x, Bit1)
    ] |> Snd <Bit * Bit, Bit>
end

def Couple <K> :=
    lambda (x0, x1) {Bit * Bit} ->
    ctrl {Bit, Bit * Bit} And of (x0, x1) [
        Bit0 -> (x1, x0);
        Bit1 -> (x1, x0) |> gphase {Bit * Bit, 2 * pi / (2 ^ K)}
    ]
end

def Rotations <N> :=
    if N = [0] then
        Qid <qunit>
    else
        if N = [1] then
            lambda (x, ()) {NTensorT <[1], Bit>} -> (Had of x, ())
        else
            lambda (x0, x) {NTensorT <N, Bit>} ->
            let (x0, (y0', y)) {NTensorT <N, Bit>} =
            (x0, x |> Rotations <[N - 1]>) in
            let ((y0, y1), y) {(Bit * Bit) * NTensorT <[N - 2], Bit>} =
            ((x0, y0') |> Couple <N>, y) in (y0, (y1, y))
        endif
    endif
end

def Qft <N> :=
    if N = [0] then
        Qid <qunit>
    else
        lambda x {NTensorT <N, Bit>} ->
        let (x0, x') {NTensorT <N, Bit>} =
        x |> Rotations <N> in
        (x0, x' |> Qft <[N - 1]>)
    endif
end

/*
Perform phase estimation on the quantum walk using a register of Tbits bits.
*/
def QuantumWalkAlgorithm <Tbits, N, F> :=
    (InitialTState <[Tbits]>, (Cleft, Root <[N + 1]>))
    |> ControlledWalk <[Tbits], [N], F>
    |> Fst <NTensorT <[Tbits], Bit>, (Coin * Vertex <[N + 2]>)>
    |> Adjoint <Qft <[Tbits]>, NTensorT <[Tbits], Bit>>
    |> lambda (x, x0) {NTensorT <[Tbits], Bit>} ->
        ctrl {NTensorT <[Tbits - 1], Bit>, NTensorT <[Tbits - 1], Bit> * Bit} x0 [
            NTensorE <[Tbits - 1], Bit0> -> (x0, Bit0);
            else -> (x0, Bit1)
        ]
    |> Snd <NTensorT <[Tbits - 1], Bit>, Bit>
end

def Tbits := [4] end

def N := [1] end

def F :=
    lambda (c0, ()) {Leaf <[N]>} -> Bit1
end

QuantumWalkAlgorithm <[Tbits], [N], F>
