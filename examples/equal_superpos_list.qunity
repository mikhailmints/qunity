/*
Equal superposition of List{#n, Bit}
*/
def $equal_superpos_list{#n} : List{#n, Bit} :=
    if #n = 0 then
        $ListEmpty{0, Bit}
    else
        // There are 2 ^ (#n + 1) - 1 possible states of List {#n, Bit}.
        // One of them is the empty list and the others have $0 or $1
        // as the first element. First, create a superposition of a qubit
        // representing the amplitudes of these 3 possibilities.
        $0
        |> u3{2 * arccos(sqrt(1 / (2 ^ (#n + 1) - 1))), 0, 0}
        // Build the state, controlling on the qubit and recursively constructing
        // the equal superposition of the remaining bits in the case where the
        // list is not empty.
        |> lambda m -> ctrl m [
            $0 -> (m, $ListEmpty{#n, Bit});
            $1 -> (m, @ListCons{#n, Bit}($plus, $equal_superpos_list{#n - 1}))
        ]
        // Use the specialized erasure pattern to erase the qubit.
        |> lambda (ctrl l [
            $ListEmpty{#n, Bit} -> ($0, l);
            @ListCons{#n, Bit}(x, l') -> ($1, l)
        ]) -> l
    endif
end

$equal_superpos_list{2}
