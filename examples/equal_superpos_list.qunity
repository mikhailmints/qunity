/*
Equal superposition of List{#N, Bit}
*/
def $EqualSuperposList {#N} : List{#N, Bit} :=
    if #N = 0 then
        $ListEmpty{0, Bit}
    else
        // There are 2 ^ (#N + 1) - 1 possible states of List {#N, Bit}.
        // One of them is the empty list and the others have $0 or $1
        // as the first element. First, create a superposition of a qutrit
        // representing the amplitudes of these 3 possibilities.
        $0
        |> u3 {2 * arccos(sqrt(1 / (2 ^ (#N + 1) - 1))), 0, 0}
        |> pmatch [
            $0 -> $Nothing{Bit};
            $1 -> @Just{Bit}($Plus)
        ]
        // Build the state, controlling on the qutrit and recursively constructing
        // the equal superposition of the remaining bits in the case where the
        // list is not empty.
        |> lambda m -> ctrl m [
            $Nothing{Bit} -> (m, $ListEmpty{#N, Bit});
            @Just{Bit}(x) -> (m, @ListCons{#N, Bit}(x, $EqualSuperposList{#N - 1}))
        ]
        // Use the specialized erasure pattern to erase the qutrit.
        |> lambda (ctrl l [
            $ListEmpty{#N, Bit} -> ($Nothing{Bit}, l);
            @ListCons{#N, Bit}(x, _) -> (@Just{Bit}(x), l)
        ]) -> l
    endif
end

$EqualSuperposList{2}
