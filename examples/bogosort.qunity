def @split{#n, 'a, #i} : Array{#n, 'a} -> Array{#i, 'a} * Array{#n - #i, 'a} :=
    if #i = 0 then
        lambda x -> ((), x)
    else
        lambda (x, x') ->
            let (x, (x0, x1)) = (x, @split{#n - 1, 'a, #i - 1}(x')) in
            ((x, x0), x1)
    endif
end

def @swap{#n, 'a, #i} : Array{#n, 'a} -> Array{#n, 'a} :=
    if #i = 0 then
        @id{Array{#n, 'a}}
    else
        lambda (x, x') ->
            let (x, (x0, (xi, x1))) = (x, @split{#n - 1, 'a, #i - 1}(x')) in
            (xi, @concat{#i - 1, #n - #i, 'a}(x0, (x, x1)))
    endif
end

def @randomize_pass_iter{#n, 'a, #i} : Array{#n, 'a} -> Array{#n, 'a} :=
    if #i >= #n then
        @id{Array{#n, 'a}}
    else
        lambda x ->
            match @had($0) [
                $0 -> x |> @swap{#n, 'a, #i};
                $1 -> x
            ] |> @randomize_pass_iter{#n, 'a, #i + 1}
    endif
end

def @randomize_pass{#n, 'a} : Array{#n, 'a} -> Array{#n, 'a} :=
    if #n = 0 then
        @id{Unit}
    else
        lambda (x, x') ->
            let (x, x') = @randomize_pass_iter{#n, 'a, 1}(x, x') in
            (x, @randomize_pass{#n - 1, 'a}(x'))
    endif
end

def @randomize_iter{#n, 'a, #niter} : Array{#n, 'a} -> Array{#n, 'a} :=
    if #niter = 0 then
        @id{Array{#n, 'a}}
    else
        lambda x ->
            x |> @randomize_pass{#n, 'a} |> @randomize_iter{#n, 'a, #niter - 1}
    endif
end

def @randomize{#n, 'a} : Array{#n, 'a} -> Array{#n, 'a} :=
    @randomize_iter{#n, 'a, #n}
end

def @is_sorted{#n, 'a, @compare : 'a * 'a -> Bit} : Array{#n, 'a} -> Bit :=
    if #n = 0 then
        lambda () -> $1
    else if #n = 1 then
        lambda (x, ()) -> $1
    else
        lambda (x0, (x1, x')) ->
            match @compare(x0, x1) [
                $0 -> $0;
                $1 -> @is_sorted{#n - 1, 'a, @compare}(x1, x')
            ]
    endif
    endif
end

def @bit_compare : Bit * Bit -> Bit :=
    lambda (a, b) -> match (a, b) [
        ($1, $0) -> $0;
        else -> $1
    ]
end

def @bogosort{#N, 'a, @compare : 'a * 'a -> Bit} : Array{#N, 'a} -> Array{#N, 'a} :=
    lambda x -> let x' = @randomize{#N, 'a}(x) in
    match @is_sorted {#N, 'a, @compare}(x') [
        $1 -> x'
    ]
end

@bogosort{4, Bit, @bit_compare}($0, ($1, ($0, ($1, ()))))
