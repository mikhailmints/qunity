def @Split {#N, 'a, #I} : NTensorT {#N, 'a} -> NTensorT {#I, 'a} * NTensorT {#N - #I, 'a} :=
    if #I = 0 then
        lambda x -> ((), x)
    else
        lambda (x, x') ->
            let (x, (x0, x1)) = (x, @Split {#N - 1, 'a, #I - 1} (x')) in
            ((x, x0), x1)
    endif
end

def @Swap {#N, 'a, #I} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    if #I = 0 then
        @Id {NTensorT {#N, 'a}}
    else
        lambda (x, x') ->
            let (x, (x0, (xi, x1))) = (x, @Split {#N - 1, 'a, #I - 1} (x')) in
            (xi, @Concat {#I - 1, #N - #I, 'a} (x0, (x, x1)))
    endif
end

def @RandomizePassIter {#N, 'a, #I} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    if #I >= #N then
        @Id {NTensorT {#N, 'a}}
    else
        lambda x ->
            match @Had ($0) [
                $0 -> x |> @Swap {#N, 'a, #I};
                $1 -> x
            ] |> @RandomizePassIter {#N, 'a, #I + 1}
    endif
end

def @RandomizePass {#N, 'a} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    if #N = 0 then
        @Id {Unit}
    else
        lambda (x, x') ->
            let (x, x') = @RandomizePassIter {#N, 'a, 1} (x, x') in
            (x, @RandomizePass {#N - 1, 'a} (x'))
    endif
end

def @RandomizeIter {#N, 'a, #Niter} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    if #Niter = 0 then
        @Id {NTensorT {#N, 'a}}
    else
        lambda x ->
            x |> @RandomizePass {#N, 'a} |> @RandomizeIter {#N, 'a, #Niter - 1}
    endif
end

def @Randomize {#N, 'a} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    @RandomizeIter {#N, 'a, #N}
end

def @IsSorted {#N, 'a, @Compare : 'a * 'a -> Bit} : NTensorT {#N, 'a} -> Bit :=
    if #N = 0 then
        lambda () -> $1
    else if #N = 1 then
        lambda (x, ()) -> $1
    else
        lambda (x0, (x1, x')) ->
            match @Compare (x0, x1) [
                $0 -> $0;
                $1 -> @IsSorted {#N - 1, 'a, @Compare} (x1, x')
            ]
    endif
    endif
end

def @BitCompare : Bit * Bit -> Bit :=
    lambda (a, b) -> match (a, b) [
        ($1, $0) -> $0;
        else -> $1
    ]
end

def @Bogosort {#N, 'a, @Compare : 'a * 'a -> Bit} : NTensorT {#N, 'a} -> NTensorT {#N, 'a} :=
    lambda x -> let x' = @Randomize {#N, 'a} (x) in
    match @IsSorted {#N, 'a, @Compare} (x') [
        $1 -> x'
    ]
end

@Bogosort {4, Bit, @BitCompare} ($0, ($1, ($0, ($1, ()))))
