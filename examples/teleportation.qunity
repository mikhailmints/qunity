let bellAlice {Bit} = BitPlus in
let (message, (bellAlice, bellBob)) {Bit * (Bit * Bit)} =
    (Bit0 |> u3 {2 * arccos(sqrt(1 / 3)), 0, 0}, (bellAlice, bellAlice))
in
let (bellBob, toSend) {Bit * NTensorT <[2], Bit>} = (bellBob,
    (message, (bellAlice, ()))
    |> Cnot <[2], [0], [1]>
    |> Gate1Q <[2], [0], Had>
)
in
let result {Bit} =
    ctrl {NTensorT <[2], Bit>, NTensorT <[2], Bit> * Bit} toSend [
        (Bit0, (Bit0, ())) -> (toSend, bellBob);
        (Bit0, (Bit1, ())) -> (toSend, bellBob |> Qnot);
        (Bit1, (Bit0, ())) -> (toSend, bellBob |> PauliZ);
        (Bit1, (Bit1, ())) -> (toSend, bellBob |> Qnot |> PauliZ)
    ] |> Snd <NTensorT <[2], Bit>, Bit>
in result
