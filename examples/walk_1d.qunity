def Step <N> :=
    lambda (x, velocity) {NTensorT <[N], Bit> * Bit} ->
        match {NTensorT <[N], Bit> * Bit, NTensorT <[N], Bit> * Bit} (x, velocity) [
            (NTensorE <[N], Bit0>, Bit0) -> (IncrementLE <[N]> of NTensorE <[N], Bit0>, Bit1);
            (NTensorE <[N], Bit1>, Bit1) -> (DecrementLE <[N]> of NTensorE <[N], Bit1>, Bit0);
            else -> ctrl {Bit, NTensorT <[N], Bit> * Bit} velocity [
                Bit0 -> (DecrementLE <[N]> of x, velocity);
                Bit1 -> (IncrementLE <[N]> of x, velocity)
            ]
        ]
end

def N := [3] end

(NTensorE <[N], BitPlus>, Bit0 |> u3 {pi/4, 0, 0})
|> Step <[N]>
|> Step <[N]>
|> Step <[N]>
|> Step <[N]>
|> Fst <NTensorT <[N], Bit>, Bit>
|> Reverse <[N], Bit>
