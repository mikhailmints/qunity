/*
"Fake" Grover's Algorithm - in this version, we are passing in the answer
to the algorithm itself, which means that it can't be used for an arbitrary
oracle. This demonstrates the amplitude amplification in the algorithm. 
*/

def GroverIter <N, Answer> :=
    lambda x {NTensorT <N, Bit>} ->
    x |> Reflect <NTensorT <N, Bit>, Answer>
    |> Reflect <NTensorT <N, Bit>, NTensorE <N, BitPlus>>
end

def Grover <N, Answer, Niter> :=
    if Niter = [0] then
        NTensorE <N, BitPlus>
    else
        Grover <N, Answer, [Niter - 1]> |> GroverIter <N, Answer>
    endif
end

def N := [5] end
def Answer := (Bit0, (Bit1, (Bit1, (Bit0, (Bit0, ()))))) end

Grover <N, Answer, [4]>
