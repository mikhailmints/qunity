/*
In-place multiplication by an odd number #a modulo 2^#n
*/
def @mod_mult{#n, #a} : Num{#n} -> Num{#n} :=
    if #n = 1 then
        @id{Num{#n}}
    else
        lambda (x0, x1) ->
        let (x0, x1) = (x0, x1 |> @mod_mult{#n - 1, #a}) in
        ctrl x0 [
            $0 -> (x0, x1);
            $1 -> (x0, @add_const{#n - 1, (#a - 1) / 2}(x1))
        ]
    endif
end

/*
Takes in an #m-bit register x and an #n-bit register y and returns
(x, y * #a^x mod 2^#n), for an odd integer #a
*/
def @mod_exp{#m, #n, #a} : Num{#m} * Num{#n} -> Num{#m} * Num{#n} :=
    if #m = 0 then
        @id{Num{#m} * Num{#n}}
    else
        lambda ((x0, x1), y) ->
        let ((x0, x1), y) = ctrl x0 [
            $0 -> ((x0, x1), y);
            $1 -> ((x0, x1), @mod_mult{#n, #a}(y))
        ]
        in let (x0, (x1, y)) = (x0, @mod_exp{#m - 1, #n, #a * #a}(x1, y))
        in ((x0, x1), y)
    endif
end

def $order_finding{#n, #a} : Num{#n} :=
    ($repeated{#n, Bit, $plus}, $num_to_state{#n, 1})
    |> @mod_exp{#n, #n, #a}
    |> @fst{Num{#n}, Num{#n}}
    |> @adjoint{Num{#n}, Num{#n}, @qft{#n}}
    |> @reverse{#n, Bit}
end

$order_finding{5, 13}
